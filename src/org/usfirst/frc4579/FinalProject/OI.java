// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.FinalProject;

import org.usfirst.frc4579.FinalProject.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick;           //plug into port 1, Logictech.
    public Joystick drivestick;         //plug into port 2. Logitech 3D.
    public JoystickButton joystickButton1;    //Shoot!
    public JoystickButton joystickButton2;    //Reload.
    public JoystickButton joystickButton3;    //Pass.
    public JoystickButton joystickButton4;    //Roll In.
    public JoystickButton joystickButton5;    //Roll Out.
    public JoystickButton joystickButton6;    //Elevator Init Manual (up).
    public JoystickButton joystickButton7;    //Elevator Init Manual (dn).
    public JoystickButton joystickButton8;    //Tilt for Pickup.
    public JoystickButton joystickButton9;    //Tilt for Goal.
    public JoystickButton joystickButton10;   //Tilt for Truss.
    public JoystickButton joystickButton11;   //Elevator Init Auto.
    public JoystickButton drivestickButton3;  //Mecanum drive left.
    public JoystickButton drivestickButton4;  //Mecanum drive right.
    public JoystickButton drivestickButton6;  //Gyro Init.
    public JoystickButton drivestickButton8;  //Elevator Init Manual (up).
    public JoystickButton drivestickButton10;  //Elevator Init Manual (dn).
    public JoystickButton drivestickButton11; //Light Toggle on/off.
    public JoystickButton drivestickButton12; //Elevator Init Auto.
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivestick = new Joystick(2);

        joystick = new Joystick(1);

        joystickButton1 = new JoystickButton(joystick, 1);
        joystickButton1.whenPressed(new Shoot());
        joystickButton2 = new JoystickButton(joystick, 2);
        joystickButton2.whenPressed(new Reload());
        joystickButton3 = new JoystickButton(joystick, 3);
        joystickButton3.whenPressed(new Pass());
        joystickButton4 = new JoystickButton(joystick, 4);
        joystickButton4.whileHeld(new RollIn());
        joystickButton5 = new JoystickButton(joystick, 5);
        joystickButton5.whileHeld(new RollOut());
        joystickButton6 = new JoystickButton(joystick, 6);
        joystickButton6.whenPressed(new ElevatorInitManual());
        joystickButton7 = new JoystickButton(joystick, 7);
        joystickButton7.whenPressed(new ElevatorInitManual());
        joystickButton8 = new JoystickButton(joystick, 8);
        joystickButton8.whenPressed(new TiltForPickup());
        joystickButton9 = new JoystickButton(joystick, 9);
        joystickButton9.whenPressed(new TiltForGoal());
        joystickButton10 = new JoystickButton(joystick, 10);
        joystickButton10.whenPressed(new TiltForTruss());
        joystickButton11 = new JoystickButton(joystick, 11);
        joystickButton11.whenPressed(new ElevatorInitAuto());

        drivestickButton6 = new JoystickButton(drivestick, 6);
        drivestickButton6.whenPressed(new GyroInit());
        drivestickButton8 = new JoystickButton(drivestick, 8);
        drivestickButton8.whileHeld(new ElevatorInitManual());
        drivestickButton10 = new JoystickButton(drivestick, 10);
        drivestickButton10.whileHeld(new ElevatorInitManual());
        drivestickButton11 = new JoystickButton(drivestick, 11);
        drivestickButton11.whenPressed(new LightToggle());
        drivestickButton12 = new JoystickButton(drivestick, 12);
        drivestickButton12.whenPressed(new ElevatorInitAuto());

        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("Reload", new Reload());
        SmartDashboard.putData("RollIn", new RollIn());
        SmartDashboard.putData("RollOut", new RollOut());
        SmartDashboard.putData("Autonomous", new AutonomousCG());
        SmartDashboard.putData("Pass", new Pass());
        SmartDashboard.putData("ElevatorInit", new ElevatorInitAuto());
        SmartDashboard.putData("ElevatorInitManual", new ElevatorInitManual());
        SmartDashboard.putData("LightOn", new LightOn());
        SmartDashboard.putData("LightOff", new LightOff());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getjoystick() {
        return joystick;
    }

    public Joystick getdrivestick() {
        return drivestick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
