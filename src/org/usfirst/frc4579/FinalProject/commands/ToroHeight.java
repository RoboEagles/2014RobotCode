// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.FinalProject.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.FinalProject.Robot;

/**
 *
 */
public class ToroHeight extends Command {

    int clicks;         //these are cycles through the motor on/off sequence.
    int dutyCycle = 2;  //increase this number to slow down the window motor.
    double setpoint, lastSetpoint;

    public ToroHeight() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        System.out.println("......Starting Toroheight.");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if ((Math.abs(Robot.oi.joystick.getZ() * -48.0 - 48.0) - lastSetpoint) > 5.) Robot.tiltManual = true;

        if (Robot.tiltManual) {
            setpoint = lastSetpoint = Robot.oi.joystick.getZ() * -48.0 - 48.0;
        }
        if (!Robot.tiltManual) {
            setpoint = Robot.setpoint;
        }
        Robot.setpoint = (int) setpoint;
        double encoder = Robot.elevator.getEncoderCount();
        double error = setpoint - encoder;
        if (Math.abs(error) <= 2.0) {
            error = 0.0;
        }
        Robot.elevator.tilt(error);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.elevator.stop();
        System.out.println("......Ending Toroheight.");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
