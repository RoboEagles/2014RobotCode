// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.FinalProject;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Gyro driveTrainGyro1;
    public static SpeedController driveTrainTopLeft;
    public static SpeedController driveTrainBottomLeft;
    public static SpeedController driveTrainTopRight;
    public static SpeedController driveTrainBottomRight;
    public static RobotDrive driveTrainRobotDrive41;
    public static AnalogChannel driveTrainbat;
    public static SpeedController shooterHammer;
    public static Relay rollerLeftToro;
    public static Relay rollerRightToro;
    public static SpeedController tilterHeight;
    public static Encoder tilterEncoder;
    public static DigitalInput tilterLimit;
    public static Relay cameraLight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput elevatorLimit;

    public static void init() {
        System.out.println("......Starting RobotMap.init().");
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainGyro1 = new Gyro(1, 1);
        LiveWindow.addSensor("Drive Train", "Gyro 1", driveTrainGyro1);
        driveTrainGyro1.setSensitivity(0.007);
        driveTrainTopLeft = new Jaguar(1, 1);
        LiveWindow.addActuator("Drive Train", "TopLeft", (Jaguar) driveTrainTopLeft);

        driveTrainBottomLeft = new Jaguar(1, 3);
        LiveWindow.addActuator("Drive Train", "BottomLeft", (Jaguar) driveTrainBottomLeft);

        driveTrainTopRight = new Jaguar(1, 2);
        LiveWindow.addActuator("Drive Train", "TopRight", (Jaguar) driveTrainTopRight);

        driveTrainBottomRight = new Jaguar(1, 4);
        LiveWindow.addActuator("Drive Train", "BottomRight", (Jaguar) driveTrainBottomRight);

        driveTrainRobotDrive41 = new RobotDrive(driveTrainTopLeft, driveTrainBottomLeft,
                driveTrainTopRight, driveTrainBottomRight);

        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainbat = new AnalogChannel(1, 3);
        LiveWindow.addSensor("Drive Train", "bat", driveTrainbat);

        shooterHammer = new Victor(1, 5);
        LiveWindow.addActuator("Shooter", "Hammer", (Victor) shooterHammer);

        rollerLeftToro = new Relay(1, 1);
        LiveWindow.addActuator("Roller", "LeftToro", rollerLeftToro);

        rollerRightToro = new Relay(1, 2);
        LiveWindow.addActuator("Roller", "RightToro", rollerRightToro);

        tilterHeight = new Victor(1, 7);
        LiveWindow.addActuator("Elevator", "Height", (Victor) tilterHeight);

        tilterEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "encoder", tilterEncoder);
        tilterEncoder.setDistancePerPulse(1.0);
        //tilterEncoder.setPIDSourceParameter(PIDSourceParameter.kAngle);
        tilterEncoder.start();
        cameraLight = new Relay(1, 3);
        LiveWindow.addActuator("Camera", "Light", cameraLight);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorLimit = new DigitalInput(3);
        System.out.println("......Ending RobotMap.init().");
    }
}
