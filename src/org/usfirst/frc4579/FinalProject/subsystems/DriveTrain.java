// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.FinalProject.subsystems;

import org.usfirst.frc4579.FinalProject.RobotMap;
import org.usfirst.frc4579.FinalProject.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4579.FinalProject.Robot;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Gyro gyro1 = RobotMap.driveTrainGyro1;
    SpeedController topLeft = RobotMap.driveTrainTopLeft;
    SpeedController bottomLeft = RobotMap.driveTrainBottomLeft;
    SpeedController topRight = RobotMap.driveTrainTopRight;
    SpeedController bottomRight = RobotMap.driveTrainBottomRight;
    RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    AnalogChannel bat = RobotMap.driveTrainbat;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double ranges[] = new double[20];
    double range, rangeTotal = 0.0;
    int index = 0;
    int indexMod = ranges.length;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new MecanumDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void MecanumDrive(Joystick drivestick) {
        double magnitude = drivestick.getMagnitude();
        magnitude = (magnitude * magnitude);
        double direction = drivestick.getDirectionDegrees();
        double angle = gyro1.getAngle();
        direction = direction - angle;
        double sensitivity = ((-drivestick.getAxis(Joystick.AxisType.kThrottle) + 1.0) / 2.0);
        double twist = drivestick.getTwist() * sensitivity;
        double power = drivestick.getY();

        //this is the primary driving mode, no buttons pressed.
        if (!Robot.oi.drivestick.getRawButton(3) && 
            !Robot.oi.drivestick.getRawButton(4)) {
            Robot.driveTrain.robotDrive41.arcadeDrive(power, twist);
        }
        if (Robot.oi.drivestick.getRawButton(3)) {
            //Robot.driveTrain.robotDrive41.mecanumDrive_Polar(magnitude, direction, twist);
            Robot.driveTrain.robotDrive41.mecanumDrive_Polar(Math.abs(drivestick.getX()), 270.0, 0.0);
        }
        if (Robot.oi.drivestick.getRawButton(4)) {
            //Robot.driveTrain.robotDrive41.mecanumDrive_Polar(magnitude, direction, twist);
            Robot.driveTrain.robotDrive41.mecanumDrive_Polar(Math.abs(drivestick.getX()), 90.0, 0.0);
        }
        averageRange();

        SmartDashboard.putNumber("      Magnitude ", magnitude);
        SmartDashboard.putNumber("Stick Direction ", direction);
        SmartDashboard.putNumber("          Power ", power);
        SmartDashboard.putNumber("          Twist ", twist);
        SmartDashboard.putNumber("    Sensitivity ", sensitivity);
        SmartDashboard.putNumber("     Gyro Angle ", angle);
        SmartDashboard.putNumber("          Range ", range);
    }

    public void move() {
        Robot.driveTrain.robotDrive41.arcadeDrive(-0.7, 0.0);
        averageRange();
    }

    public void stop() {
        robotDrive41.mecanumDrive_Polar(0.0, 0.0, 0.0);

    }

    public void gyrostart() {
        gyro1.reset();
    }

    public double gyroangle() {
        double angle = gyro1.getAngle();
        angle = angle % 360.0;
        if (Math.abs(angle) > 180.0) {
            angle = angle - ((angle / Math.abs(angle)) * 360.0);
        }
        return angle;
    }

    public double getRange() {
        //use the range readings that are averaged in the drive routine.
        return range;
    }

    private void averageRange() {
        //the following lines create a more stable and reliable range reading.
        //range is also a class field so its accessible elsewhere.
        rangeTotal = rangeTotal - ranges[index];
        ranges[index] = bat.getAverageVoltage() * 3.35958016; //range in feet.
        rangeTotal = rangeTotal + ranges[index];
        range = rangeTotal / indexMod;
        index = (index + 1) % indexMod;
    }
}
