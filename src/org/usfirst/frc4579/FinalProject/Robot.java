// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4579.FinalProject;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4579.FinalProject.commands.AutonomousCG;
import org.usfirst.frc4579.FinalProject.subsystems.Camera;
import org.usfirst.frc4579.FinalProject.subsystems.DriveTrain;
import org.usfirst.frc4579.FinalProject.subsystems.Roller;
import org.usfirst.frc4579.FinalProject.subsystems.Shooter;
import org.usfirst.frc4579.FinalProject.subsystems.Elevator;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command autonomous;
    public static boolean useCamera = false;
    public static int tilterMethod = 0;
    public static int setpoint = 0;
    public static boolean tiltManual = true;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Elevator elevator;
    public static Shooter shooter;
    public static Roller roller;
    public static Camera camera;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        System.out.println("......Starting Robot robotInit().");
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shooter = new Shooter();
        roller = new Roller();
        elevator = new Elevator();
        camera = new Camera();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();

        //The following lines try to initialize the camera if expected.
        if (useCamera) {
            int count = 0;
            camera.cameraPreInit();
            while (!camera.cameraInitialized && (count < 6)) {
                camera.cameraInit();   //Ten seconds max per cycle.
                count += 1;
                System.out.println("\n....Camera Loop " + count);
            }
            System.out.println("....Camera?: " + camera.cameraInitialized);
            SmartDashboard.putBoolean("Camera?", camera.cameraInitialized);

            for (int i = 0; i < 3; i++) {
                camera.lightOn();
                Timer.delay(0.5);
                camera.lightOff();
                Timer.delay(0.5);
            }
        }
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        //autonomousCommand = new AutonomousCommand();
        autonomous = new AutonomousCG();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        System.out.println("......Starting autonomous.start()");
        //if (autonomousCommand != null) autonomousCommand.start();
        if (autonomous != null) {
            autonomous.start();
        }
        System.out.println("......Ending autonomous.start()");
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        //if (autonomousCommand != null) autonomousCommand.cancel();
        if (autonomous != null) {
            autonomous.cancel();
            RobotMap.driveTrainRobotDrive41.setSafetyEnabled(true);
        }
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
